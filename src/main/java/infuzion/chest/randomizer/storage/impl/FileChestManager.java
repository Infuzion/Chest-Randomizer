package infuzion.chest.randomizer.storage.impl;

import infuzion.chest.randomizer.ChestRandomizer;
import infuzion.chest.randomizer.storage.ChestLocation;
import infuzion.chest.randomizer.storage.ChestManager;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.scheduler.BukkitTask;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.*;

@SuppressWarnings("unchecked")
public class FileChestManager extends ChestManager {
    private final YamlConfiguration chestConfig;
    private final File chestConfigFile;
    private BukkitTask runnable;

    public FileChestManager(ChestRandomizer plugin) {
        super(plugin);
        chestConfigFile = new File(plugin.getDataFolder(), "chests.yml");
        chestConfig = YamlConfiguration.loadConfiguration(chestConfigFile);
        init();
    }

    private void backup() {
        if (plugin.getConfigManager().getBoolean("disableAutoBackup")) {
            return;
        }
        Calendar cal = Calendar.getInstance();
        long curTime = cal.getTimeInMillis();
        try {
            File directory = new File(chestConfigFile.getParentFile(), "backup");
            if (!directory.mkdir()) {
                return;
            }
            Files.copy(chestConfigFile.toPath(), new File(directory, "chests_" + curTime + "_backup.yml").toPath());
            File[] files = directory.listFiles();
            if (files == null) {
                return;
            }
            if (files.length > 25) {
                Arrays.sort(files, new Comparator<File>() {
                    public int compare(File f1, File f2) {
                        Long lastModified = f1.lastModified();
                        return lastModified.compareTo(f2.lastModified());
                    }
                });

                for (int i = 24; i < files.length; i++) {
                    //noinspection ResultOfMethodCallIgnored
                    files[i].delete();
                }
            }

        } catch (IOException e) {
            plugin.getLevelLogger().severe("chests.yml auto backup failed!");
        }
    }

    public void cleanUp() {
        if (runnable != null) {
            runnable.cancel();
        }
        save();
        saveFile(false);
    }

    protected void save() {
        Map<String, List<ChestLocation>> groups = new HashMap<>();
        for (ChestLocation e : chests) {
            String groupName = e.getGroup().getName();
            List list;
            if (groups.containsKey(groupName)) {
                list = groups.get(groupName);
            } else {
                list = new ArrayList<>();
            }

            list.add(e);
            groups.put(groupName, list);
        }

        for (String groupName : groups.keySet()) {
            chestConfig.set("ChestRandomizer." + groupName, groups.get(groupName));
        }
    }

    private void init() {
        chestConfig.options().header("DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU ARE DOING\n" +
                "Changes made can be deleted if the server is running\n" +
                "ANY ERRORS IN THE YML FORMAT CAN RESULT IN COMPLETE DESTRUCTION OF THIS FILE");
        chestConfig.addDefault("1", "1");
        chestConfig.options().copyDefaults(true);
        saveFile();
        load();
        backup();
        runnable = new BukkitRunnable() {
            public void run() {
                save();
                saveFile();
                backup();
            }
        }.runTaskTimer(plugin, 1200L, 1200);

    }

    private void load() {
        if (!chestConfig.isConfigurationSection("ChestRandomizer")) {
            return;
        }
        for (String groupName : chestConfig.getConfigurationSection("ChestRandomizer").getValues(false).keySet()) {
            chests.addAll((List<ChestLocation>) chestConfig.getList("ChestRandomizer." + groupName));
        }
    }

    private void saveFile() {
        saveFile(true);
    }

    private void saveFile(boolean async) {
        if (!async) {
            try {
                chestConfig.save(chestConfigFile);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            new BukkitRunnable() {
                public void run() {
                    saveFile(false);
                }
            }.runTaskAsynchronously(plugin);
        }
    }
}
